name: 'reusable_create_tag'
on:
  workflow_call:
    inputs:
      tag:
        description: 'The name of the tag to be created.'
        type: 'string'
        required: true
      branch:
        description: 'The branch to create tag from.'
        type: 'string'
        required: false
        default: 'main'
      message:
        description: 'Message for the tag.'
        type: 'string'
        required: false

jobs:
  create-tag:
    runs-on: 'ubuntu-latest'
    environment: release
    permissions:
      contents: 'write'
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: 'create tag'
        uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
        with:
          # Use token minter access token.
          github-token: '${{ github.token }}'
          retries: '3'
          script: |+
            core.info(`event: ${{ github.event }}`)
            core.info(`sender: ${{ github.event.sender }}`)
            core.info(`sender data: ${{ github.event.sender }}['data']`)
            core.info(`event data: ${{ github.event }}['data']`)
            // Get the head commit from branch.
            const branch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ inputs.branch }}',
            })
            // Branch returns the latest commit info. See schema:
            // https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch
            const sha = branch['data']['commit']['sha']
            await github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ inputs.tag }}',
              object: sha,
              type: 'commit',
              message: '${{ inputs.message }}'
            });

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ inputs.tag}}',
              sha: sha,
            })
